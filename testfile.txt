this is a test file, not even a code

this is the 3rd line of the test file

I'm only adding this for the branch my_branch

now I'm continuing to work on this branch, but I'm not committing yet
RESULT: I can't checkout another branch until I commit this one.

ok, I'm committing
RESULT: I can't directly commit. I have to add this file because it's modified now.

back from branch_from_past, let's see if there's anything different this time
RESULT: turns out I need to re git add this file.. huhhh

do I need to re add if don't leave this branch? I hope not. (past experience said so)
RESULT: YES I DO. Huhhhh... Always add it to staging? interesting

I just copied a file timer.dat from the outside to this dirrectory. I want to see if git can pickup
the changes when I copy another version of the same file in to replace this one. 
RESULT: Here's the result after the git add timer.dat. and git commit. Even though this current file
testfile.txt was changed, but it wasn't added to the staging area, this commit didn't include it. The
commit only updated the new file timer.dat
RESULT: apparently git is smart enough to just do a diff of the new and old version, instead of tracking 
how it got there. Cool!

git commit -a -m "message" automatically add all modified files without doing git add. Yay! Now let's try
if it can automatically add a new file


